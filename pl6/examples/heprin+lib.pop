#lang s-exp "../runtime.rkt"

(import check-ppt give)
#;
(define/handler (stablizer old new evt)
  (define count (stable-count new))
  (match* (old new)
    [((state [count (not 2)])
      (state [count 2]))
     (update stable? #t)])
  (match evt
    [`(update (ptt ,t))
     (if (>= 100 t 60)
         (update stable-count (add1 count))
         (update stable-count 0))]))

(define/handler (change-heparin _ st evt)
  (define/state current-infusion
    -> (drug (drug-type heparin) "iv" (13 units/kg/hour)))

  (define (update-infusion-by x)
    (define amt (match st [(state (current-infusion (drug _ _ v))) v]))
    (define d (drug (drug-type heparin) "iv" (+ x v)))
    (update current-infusion d)
    (give d))

  (define (give-bolus x)
    (give (drug (drug-type heparin) "iv?" x)))
  
  (match evt
    [`(update (ptt ,t)) 
     (cond [(< t 45)
            (give-bolus (80 units/kg))
            (update-infusion-by (3 units/kg/hour))]
           [(< 45 t 59)
            (give-bolus (40 units/kg))
            (update-infusion-by (1 units/kg/hour))]
           [(< 101 t 123)
            (update-infusion-by (-1 units/kg/hour))]
           [(> t 123)
            (give (drug (drug-type heparin) "iv" (0 units/kg/hour)))
            (after (1 hour)
                   (update-infusion-by (3 units/kg/hour)))])]))

#;
(define/handler (ptt _ st _)
  (define/state last-time -> 0)
  (match st 
    [(state [stable? #f]
            [last-time (? (curryr after? (6 hours)) _)])
     (update last-time (now))
     (check-ptt)]
    [(state [stable? #t]
            [last-time (? (curryr after? (12 hours)) _)])
     (update last-time (now))
     (check-ptt)]))



  
  
  
  
  
(define/state stable? -> #f)
(define/state stable-count -> 0)



(handler ptt
         (define s (<= (? 3) (lookup (message (update ptt (with-value (>= 100 % 60)))))))
         ;; defines a standard reference point for time
         (when-this-becomes-true stable?  
                                 install
                                 (every (24 hours) ;; updates reference point
                                        (check-ppt)))
         (when-this-becomes-true (not stable?)
                                 install
                                 (every (6 hours)
                                        (check-ppt))))

(handler stablizer
         ;; whenevers duplicate their expressions
         ;; and bind free variables from the state
         (when-this-becomes-true (stable-count . >= . 2)
           (update stable? (add1 lsjefkles)))
         
         
         
         (on-message (update ptt (with-var v))
           (cond [(>= 100 v 60) ;; 100 >= v >= 60
                  (update stable-count (add1 stable-count))] ;; elsewhere free variables are looked up in the current state
                 [else
                  (update stable-count 0)
                  (update stable? #f)])))


(handler stablizer
         (update stable? (<= (? 3) (lookup (message (update ptt (with-value (>= 100 % 60))))))))



(and (not (get stable? old))
     (get stable? new))
