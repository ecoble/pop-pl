#lang s-exp "../runtime.rkt"

(require "../lib.rkt" racket/function)

(import stop give request notify-physician)

(define/state analgesic-type
  'initial 'later 'non-nsaid 'off)
(define/state npo?
  'npo 'po)

(define/handler (extern-npo? _ _ evt)
  (match evt
    [`(update (npo? ,v))
     (update npo? v)]
    [_ (void)]))

(define/handler (discontinue old new evt)
  (stop "stuff")
  (remove-handler discontinue))

(define/handler (initial old new evt)
  (define (m? state)
    (match? state 
            (hash-table ('analgesic-type 'initial))))
  (when (and
         (not (m? old))
         (m? new))
    (give "some-drug")
    (new-handler
     initial2
     (let ([t (+ (current-time new) (6 hours))])
       (lambda (old new _)
         (when (and (before? old t)
                    (after? new t))
           (update analgesic-type 'later)
           (remove-handler initial2)))))))

(define/handler (later/transitions old new evt)
  (define (m? state)
    (match? state
            (hash-table ('analgesic-type 'later))))
  (when (and (not (m? old))
             (m? new))
    (new-handler
     after2
     (let ([t (+ (current-time new) (3 days))])
       (lambda (old new _)
         (when (and (before? old t)
                    (after? new t))
           (update analgesic-type 'non-nsaid)
           (remove-handler after2)))))))

(define/handler (later+npo/whenevers _ st event)
  (define/state last-time time? -> 0)
  (define drug "something1")
  (match event
    [`(given ,(eq drug))
     (update last-time (current-time st))]
    [_ (void)])
  (match st
    [(hash-table
      ('npo? 'npo)
      ('analgesic-type 'later)
      ('last-time (? (lambda (_) (after? st (+ last-time (4 hours)))))))
     (give drug)]
    [_ (void)]))

(define/handler (later+po/whenevers _ st event)
  (define/state last-time time? -> 0)
  (define drug "something2")
  (match event
    [`(given ,(eq drug)) 
     (update last-time (current-time st))]
    [_ (void)])
  (match st 
    [(hash-table
      ('npo? 'po)
      ('analgesic-type 'later)
      ('last-time (? (lambda (_) (after? st (+ last-time (4 hours)))))))
     (give drug)]
    [_ (void)]))

(define/handler (non-nsaid _ st event)
  (define/state last-time time? -> 0)
  (define drug "something3")
  (match event
    [`(given ,(eq drug)) 
     (update last-time (current-time st))]
    [_ (void)])
  (match st
    [(hash-table
      ('npo? 'po)
      ('analgesic-type 'later)
      ('last-time (? (lambda (_) (after? st (+ last-time (4 hours))))))
      (_ _) ...)
     (give drug)]
    [_ (void)]))


;; ok lets try continous drugs

(define/state continous drug? -> (drug (drug-type fentanol) "subcut" (25 micrograms/hour)))
(define/state on-demand drug? #f -> (drug (drug-type fentanol) "subcut" (25 micrograms)))

(define/handler (start _ s _)
  (remove-handler start)
  (define d (continous s))
  (give d))

(define/handler (update-continous old new _)
  (define d1 (continous old))
  (define d2 (continous new))
  (when (not (equal? d1 d2))
    (give d2)))

;; this is iffy... we really should just let the machine handle this
(define/handler (PCA _ state event)
  (match* (state event)
    [((hash-table ('on-demand (? values d)) (_ _) ...)
      `(action (give-on-demand)))
     (give d)]
    [(_ _) (void)]))

;; which means these needs to communicate the new dosage to the machine
(define/handler (breakthrough-pain _ state evt)
  (define/state pain-high-count natural? -> 0)
  (match* (state evt)
    [((hash-table ('pain-high-count 3) (_ _) ...)
      `(update pain-score ,(? (curry <= 8))))
     (notify-physician)]
    [((hash-table
       ('on-demand (drug t m v))
       ('pain-high-count c)
       (_ _) ...)
      `(update pain-score ,(? (curry <= 8))))
     (update pain-high-count (add1 c))
     (update on-demand (drug t m (+ v (10 micrograms))))
     (new-handler
      pain-score-check
      (let ([t (+ (current-time state) (1 hour))])
        (lambda (old new _)
          (when (and (before? old t)
                     (after? new t))
            (remove-handler pain-score-check)
            (request 'value 'pain-score)))))]
    [((hash-table ('pain-high-count c) (_ _) ...)
      `(update pain-score ,_))
     (update pain-high-count (max (sub1 c) 0))]
    [(_ _) (void)]))

(define/handler (minimal-pain _ state evt)
  (match* (state evt)
    [((hash-table ('on-demand (drug t m v)) (_ _) ...)
      `(update pain-score (? _ (curry >= 2))))
     (update on-demand (drug t m (- v (10 micrograms))))]
    [(_ _) (void)]))

(define/handler (taper _ s _)
  (remove-handler taper)
  (new-handler
   taper-off
   (let ([t (+ (current-time s) (3 days))])
        (lambda (old new _)
          (when (and (before? old t)
                     (after? new t))
            (update on-demand #f)
            (remove-handler taper-off)
            (new-handler
             taper-down
             (lambda (_ new _)
               (define/state last-time time? -> 0)
               (when (> (current-time new) (+ (4 hours) (last-time new)))
                 (match new
                   [(hash-table ('continous (drug t m v)) (_ _) ...)
                    (update continous (drug t m (max 0 (- v (10 mg)))))])))))))))

