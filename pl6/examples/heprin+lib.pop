#lang s-exp "../runtime.rkt"

(import check-ppt give)

(define/state stable? -> #f)
(define/state sequential-stable-count -> 0)

(define/handler (stablizer old new evt)
  (define count (sequential-stable-count new))
  (match* (old new)
    [((state [count (not 2)])
      (state [count 2]))
     (update stable? #t)])
  (match evt
    [`(update (ptt ,t))
     (if (>= 100 t 60)
         (update sequential-stable-count (add1 count))
         (update sequential-stable-count 0))]))

(define/handler (change-heparin _ st evt)
  (define/state current-infusion
    -> (drug (drug-type heparin) "iv" (13 units/kg/hour)))

  (define (update-infusion-by x)
    (define amt (match st [(state (current-infusion (drug _ _ v))) v]))
    (define d (drug (drug-type heparin) "iv" (+ x v)))
    (update current-infusion d)
    (give d))

  (define (give-bolus x)
    (give (drug (drug-type heparin) "iv?" x)))
  
  (match evt
    [`(update (ptt ,t)) 
     (cond [(< t 45)
            (give-bolus (80 units/kg))
            (update-infusion-by (3 units/kg/hour))]
           [(< 45 t 59)
            (give-bolus (40 units/kg))
            (update-infusion-by (1 units/kg/hour))]
           [(< 101 t 123)
            (update-infusion-by (-1 units/kg/hour))]
           [(> t 123)
            (give (drug (drug-type heparin) "iv" (0 units/kg/hour)))
            (after (1 hour)
                   (update-infusion-by (3 units/kg/hour)))])]))

(define/handler (ptt _ st _)
  (define last-time -> 0)
  (match st 
    [(state [stable? #f]
            [last-time (? (curryr after? (6 hours)) _)])
     (update last-time (now))
     (check-ptt)]
    [(state [stable? #t]
            [last-time (? (curryr after? (12 hours)) _)])
     (update last-time (now))
     (check-ptt)]))


